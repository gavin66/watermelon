/*! tagger - v1.0.0 - 2016-06-14
 * https://github.com/gavin66/tagger#readme
 * Copyright (c) 2016 gavin; Licensed MIT */
+function (a) {
    "use strict";
    function b(b) {
        var d = ["getTags", "addTag"];
        if ("string" == typeof b && d.indexOf(b) > -1) {
            var e = this.data("tagger");
            return e[b]()
        }
        return this.each(function () {
            var d = a(this), e = d.data("tagger"), f = a.extend({}, c.DEFAULTS, d.data(), "object" == typeof b && b);
            e || d.data("tagger", e = new c(this, f)), "string" == typeof b && e[b]()
        })
    }

    var c = function (b, c) {
        this.$element = a(b), this.$container = a(c.container), this.namespace = "tagger", this.options = c, this.tags = c.tags, this.lastInputValue = null, this.init()
    };
    c.DEFAULTS = {container: "#tag-container", divide: !0, color: "random", tags: []}, c.prototype.init = function () {
        var b = this;
        this.tags.forEach(function (a) {
            b.createElement(a)
        }), this.$element.on("keydown." + this.namespace, a.proxy(function (a) {
            (13 == a.which || 9 == a.which) && this.add(a)
        }, this))
    }, c.prototype.add = function (a) {
        var b = this;
        if (a && a.preventDefault(), b.lastInputValue = b.$element.val().trim(), "boolean" == typeof this.options.divide && this.options.divide !== !1 || "string" == typeof this.options.divide) {
            var c = " ";
            typeof this.options.divide === !0 ? c = " " : "string" == typeof this.options.divide && (c = this.options.divide);
            var d = this.lastInputValue.split(c);
            d.forEach(function (a) {
                a = a.trim(), a.length > 0 && -1 === this.tags.indexOf(a) && this.tags.push(a) && b.createElement(a)
            }, b)
        } else curValue.length > 0 && -1 === this.tags.indexOf(b.lastInputValue) && b.createElement(b.lastInputValue)
    }, c.prototype.createElement = function (b) {
        var c = this, d = ["tagger-piece-LightPink", "tagger-piece-conifer", "tagger-piece-sauce", "tagger-piece-RedGold", "tagger-piece-ultramarine", "tagger-piece-swarthy", "tagger-piece-ink", "tagger-piece-amber"], e = document.createElement("span");
        a(e).addClass("tagger-piece"), "string" == typeof this.options.color ? "random" === this.options.color ? a(e).addClass(d[Math.floor(Math.random() * d.length + 1) - 1]) : d.indexOf(this.options.color) > -1 ? a(e).addClass(this.options.color) : a(e).addClass("tagger-piece-ink") : a(e).addClass("tagger-piece-ink"), e.appendChild(document.createTextNode(b));
        var f = document.createElement("a");
        f.className = "remove", f.appendChild(document.createTextNode("x")), a(f).on("click." + this.namespace, null, {input: b}, function (a) {
            a && a.preventDefault(), c.remove(a, e)
        }), e.appendChild(f), this.$container.append(e), this.$element.val("")
    }, c.prototype.remove = function (b, c) {
        this.tags.indexOf(b.data.input) > -1 && this.tags.splice(this.tags.indexOf(b.data.input), 1) && a(c).fadeOut(300, function () {
            a(c).remove()
        }) && this.$element.trigger("tagger.remove", [])
    }, c.prototype.destroy = function () {
    }, c.prototype.getTags = function () {
        return this.tags
    }, c.prototype.addTag = function () {
        this.add()
    };
    var d = a.fn.tag;
    a.fn.tagger = b, a.fn.tagger.Constructor = c, a.fn.tagger.noConflict = function () {
        return a.fn.tagger = d, this
    }
}(jQuery);